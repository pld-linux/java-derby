--- java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection30.java.sav	2005-07-02 03:57:43.000000000 +0200
+++ java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection30.java	2006-09-07 10:41:09.000000000 +0200
@@ -20,13 +20,6 @@
 
 package org.apache.derby.iapi.jdbc;
 
-import java.sql.Statement;
-import java.sql.PreparedStatement;
-import java.sql.CallableStatement;
-import java.sql.SQLException;
-import java.sql.Savepoint;
-import org.apache.derby.iapi.reference.JDBC30Translation;
-
 /**
 	Extends BrokeredConnection to provide the JDBC 3.0 connection methods.
  */
@@ -38,189 +31,4 @@
 		super(control);
 	}
 
-	public final Statement createStatement(int resultSetType,
-                                 int resultSetConcurrency,
-                                 int resultSetHoldability)
-								 throws SQLException {
-		try {
-			control.checkHoldCursors(resultSetHoldability);
-			return control.wrapStatement(getRealConnection().createStatement(resultSetType, resultSetConcurrency, resultSetHoldability));
-		}
-		catch (SQLException se)
-		{
-			notifyException(se);
-			throw se;
-		}
-	}
-	public final PreparedStatement prepareStatement(String sql,
-                                          int resultSetType,
-                                          int resultSetConcurrency,
-                                          int resultSetHoldability)
-										  throws SQLException {
-		try {
-			control.checkHoldCursors(resultSetHoldability);
-			return control.wrapStatement(
-				getRealConnection().prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability), sql, null);
-		}
-		catch (SQLException se)
-		{
-			notifyException(se);
-			throw se;
-		}
-	}
-	public final CallableStatement prepareCall(String sql,
-                                     int resultSetType,
-                                     int resultSetConcurrency,
-                                     int resultSetHoldability)
-									 throws SQLException {
-		try {
-			control.checkHoldCursors(resultSetHoldability);
-			return control.wrapStatement(
-				getRealConnection().prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability), sql);
-		}
-		catch (SQLException se)
-		{
-			notifyException(se);
-			throw se;
-		}
-	}
-
-	public final Savepoint setSavepoint()
-		throws SQLException
-	{
-		try {
-			control.checkSavepoint();
-			return getRealConnection().setSavepoint();
-		}
-		catch (SQLException se)
-		{
-			notifyException(se);
-			throw se;
-		}
-	}
-
-	public final Savepoint setSavepoint(String name)
-		throws SQLException
-	{
-		try {
-			control.checkSavepoint();
-			return getRealConnection().setSavepoint(name);
-		}
-		catch (SQLException se)
-		{
-			notifyException(se);
-			throw se;
-		}
-	}
-
-	public final void rollback(Savepoint savepoint)
-		throws SQLException
-	{
-		try {
-			control.checkRollback();
-			getRealConnection().rollback(savepoint);
-		}
-		catch (SQLException se)
-		{
-			notifyException(se);
-			throw se;
-		}
-	}
-
-	public final void releaseSavepoint(Savepoint savepoint)
-		throws SQLException
-	{
-		try {
-			getRealConnection().releaseSavepoint(savepoint);
-		}
-		catch (SQLException se)
-		{
-			notifyException(se);
-			throw se;
-		}
-	}
-
-
-	public final int getHoldability()
-		throws SQLException
-	{
-		try {
-			return getRealConnection().getHoldability();
-		}
-		catch (SQLException se)
-		{
-			notifyException(se);
-			throw se;
-		}
-	}
-
-	public final void setHoldability(int holdability)
-		throws SQLException
-	{
-		try {
-			control.checkHoldCursors(holdability);
-			getRealConnection().setHoldability(holdability);
-			stateHoldability = holdability;
-		}
-		catch (SQLException se)
-		{
-			notifyException(se);
-			throw se;
-		}
-	}
-
-	public final PreparedStatement prepareStatement(
-			String sql,
-			int autoGeneratedKeys)
-    throws SQLException
-	{
-		try {
-			return control.wrapStatement(getRealConnection().prepareStatement(sql, autoGeneratedKeys), sql, new Integer(autoGeneratedKeys));
-		}
-		catch (SQLException se)
-		{
-			notifyException(se);
-			throw se;
-		}
-	}
-
-	public final PreparedStatement prepareStatement(
-			String sql,
-			int[] columnIndexes)
-    throws SQLException
-	{
-		try {
-			return control.wrapStatement(getRealConnection().prepareStatement(sql, columnIndexes), sql, columnIndexes);
-		}
-		catch (SQLException se)
-		{
-			notifyException(se);
-			throw se;
-		}
-	}
-
-	public final PreparedStatement prepareStatement(
-			String sql,
-			String[] columnNames)
-    throws SQLException
-	{
-		try {
-			return control.wrapStatement(getRealConnection().prepareStatement(sql, columnNames), sql, columnNames);
-		}
-		catch (SQLException se)
-		{
-			notifyException(se);
-			throw se;
-		}
-	}
-
-	public BrokeredPreparedStatement newBrokeredStatement(BrokeredStatementControl statementControl, String sql, Object generatedKeys) throws SQLException {
-		return new BrokeredPreparedStatement30(statementControl, getJDBCLevel(), sql, generatedKeys);
-	}
-	public BrokeredCallableStatement newBrokeredStatement(BrokeredStatementControl statementControl, String sql) throws SQLException {
-		return new BrokeredCallableStatement30(statementControl, getJDBCLevel(), sql);
-	}
-
-	protected int getJDBCLevel() { return 3;}
-
 }
